nvidia와 오큘러스 퀘스트2 

아마존 Sumerian : -> Web VR
소프트웨어는 스팀, 오큘러스에 영향 많이 받음.

HoloLens2 - 배송비 450만원!!!
-> MR 장비 B2B 가르치는 기술 회사에서 가장 많이 사용되는 서비스

MS Azure 서비스 - 클라우드 서비스
AWS 써도 되고 이거 써도 되고!!!! - 제품 : 혼합현실
Spatial Anchors

세계최초의 비디오 게임 - 테니스 포 투 : 과학자들이 만든 이유 : 컴퓨터의 용도가 다양하다는 것을
보여주기 위해서!! - 나사에서 아폴로 달 보낼때 컴퓨터를 샀음!
아폴로 달에 가는데 계산할라고! - 원래 계산원들한테 맡겼던거 - but 오류가 많이 발생해서
조금 쓰다가 때려침 ㅈㅈ

Nvidia AGX = 아직 널리 보급되지 않음.
산업군을 볼때 사용자가 어느정도인지 파악하는게 제일 좋다.
기업들이 이걸 도입했나 안했나, 상품화가 되어있나 안되어있나. 점점 기업용으로 쓰다가
나중에 이런 기술들이 보급화되어서 소비자들의 이용이 늘어짐에 따라 보급화가 이뤄진다.
소비자용 소프트웨어로 사용될 수 있는! 큰틀에서 많이 봤으면 좋겠다!

기획 - 개발 - 테스트 - 평가 - 기획 ....
: 무슨생각으로 만드는지 알아야 한다.
빈센트 반고흐, 고갱이 같이 살았던 집이라고 생각해보자. 
2층 작업실 - 기획적인 방향을 확실히 제시했기 때문에 확 달라진다.

ex. 배경: 빈센트 반고흐의 2층 작업실
     저녁 5시
     저녁에 고갱이 와서 밥 먹고 간데
     유화 그림 그리는 작업중
> 고흐 살았던 곳 실내를 작품을 보고 맞춰가기 옷가지 창문 그림들 가구배치들
신경쓰면서 만들려고 했을 것이다. 

기획이 없으면 방향성이 없고 퀄리티 지향점이 없어지는 것이다. 

뭔가 이런 기획을 하고 작업을 하는게 작업물과 퀄리티에 영향을 준다!!!
>> 공간과 이런거에 대한 컨셉을 가져라
기획력이 부족하면 좋은 퀄리티가 안나오고 방향을 잃어버린다! 이렇게 생각하십쇼

무료 아이콘 사이트 - 각자의 힘을 합쳐 기획 기술 아트 조합이 곧 좋은 작품을
만들 수 있다. [협업!!] 협업을 잘할 줄 알아야 한다!!
협동해서 일을 해야 한다. - 뭔가 책임을 떠넘기는 거일 수 있다. - 각자의 역할을 나누어서 
서로 주고 받고 시너지 효과를 나타낼 수 있도록 하는 방법!!

결과물 잘 나왓나>? - 개인이 나오기 어려운걸 팀플로 한거라서 높을 수 있다.
앞으로 우리가 경험할 내용 - 팀플레이!!! 어떻게 하면 팀플레이를 잘 할 수 있을까?

>>> 스위치 온오프 중에 브로드캐스팅으로 제어 >> limit message - 방송해야
한다 해놓고 메시지를 남겨 나야하는데 light off light in 했어야 했음.

오늘 알려줄 것!!! 프로그래밍의 기초! 꼭 중요!
그렇지만 c++에서는 조금 달라질 수 있지만,,, 정답이 있는 항목이 아니다!!
천체 물리학, 수학같은게 아니라 개발분야임. 다양한 아티클, 컬럼을 보면서
이해의 폭을 넓히고 다양성을 넓힐 수 있도록 하는 것이 가장 중요하다.

기본 Base!!!
- State Machine 
- Transition
 : 상태 전이

- Inheritance(상속)
- Component
- BroadCasting
- Emitter

조건 결과문 (방아쇠 : 조건에 따른 결과)
-Trigger Event
- Condition[비교문]/Execute (결과들을 다양하게 내는 방법)

FSM (Finite State Machine)
보통의 시스템 : 대기 - 주차 정산 - 차단기 올라감 - 차단기 내려감
대기에서 차단기 올라가는 등 상태가 전이되는 상태가 생길 수 있음.

ex. 주차 차단기 FSM
대기 > 차단기 올라감 (주차장 바깥쪽 센서에 차량이 발견되면)
       > 주차 정산 (주차장 안쪽 센서에 차량이 발견되면)

주차정산 > 차단기 올라감 (정산을 마치면)
차단기 올라감 > 차단기 내려감 (센서에 차량이 10초간 없으면)
차단기 내려감 > 대기 (3초 후 자동으로 전이)

AI 인공지능 - 
1. 할 수 있는 액션의 수가 많아지게 수많은 FSM 시스템!
점점 똑똑해짐 - 행동이 늘어나면!!
2. 조건이(창발적 조건들이 늘어나면) 확장되면 스마트한 AI라고 볼 수 있음.

AI 스피커 - 처음에는 단순한 작용하는 스피커였다가 음성인식이 세련되게 다듬고 업그레이드
되면서 업그레이드되가고 있음. 기계는 유아인것과 마찬가지 - 컴퓨터가 학습하여 
자신의 인공지능이 업그레이드 - 머신러닝을 통해 상호작용이 다양해지고 많아진다. 

대기 - 차량진입 - 주차 정산 

lumbyard 집어넣을 수 있음!!
----------------------------------------------------------------------------------
몬스터 생겨나게 할 절대적으로 필요한 요소
-> 텍스처, 이름, HP, 공격력 : 등등 생각해야될게 엄청 많다!! 

상속화ㅣ

오크 : 몬스터
> 텍스처, 이름, HP, 공격력 + @
 - 근육량
 - 드랍 아이템
 - 텍스쳐(수정) - 앞에 요소들을 수정함!

상속화ㅣ

오크 족장 : 오크
몬스터 + 오크
-텍스쳐(수정),
-특수 스킬

장점 - 코드를 중복화할 필요 X
단점 - 처음에 상속화하지 않을 요소들을 작업을 추가로 해야되는 상황 발생
오크 3D 모델링, 스켈레톤 필요하지만,
2D에서는 필요 X > 상속으로 몬스터 타입 생성할 때 처음부터 다시 작업하거나 일일이
수정해야된다.

컴포넌트 - 모듈 : 레고 생각하면 됩니다! 
수많은 부품을 만든다고 생각해보자. 

폐          지느러미      날개       달리기     부리

아가미     식사           두뇌       손          공격

다리         뿔            잠자기     뼈          방어     

코뿔소 만들어보자 

폐 , 달리기, 식사, 공격, 다리, 다리, 다리, 다리, 뿔, 잠자기, 뼈 : 완료
컴포넌트들이 모여 코뿔소라는 개체가 나타남. 
모자란 부품 부족한 부품은 따로 만들면 되니까!!

독수리 

폐, 날개, 부리, 식사, 공격, 다리, 잠자기, 뼈, 방어

컴포넌트 양이 많아지고 방대해지면 뭐든 만들 수 있다.
다만 그 컴포넌트 만들기 겁나 빡세서 그렇지...

프로그램들은 컴포넌트 만들기보다 기능에 초점!
디자이너 & 기획자들은 컴포넌트 조합하고 잘 조립하면 됨!!
컨텐츠 브라우저 및 컨텐츠 툴 만드는 트렌드가 다음과 같다,

그 당시 개발 가능 - 스타크래프트 캠페인 에디터
3,4년전만 해도!! 

언리얼 엔진 + 유니티 엔진을 제대로 활용하는 게 얼마 안되는 시점입니다.
방대한 데이터 바꾸고 수정하면서 제작하는 방식
프로그래머들이 데이터 베이스들을 바꾸면서 게임을 제작하는 방식.
수많은 퍼러머터들을 애용했다. 어느정도 계승되어 있음.
크게 변하지 않을 것이다.

여기까지가 component!
어떻게 component를 제어할 수 있을까??
상속은 무조건 독립적이지 않다. - 부모에게 영향을 받지만,
컴포넌트는 무조건 독립적이어야 한다. 안그러면 역할을 상실할 수 있기 때문.
폐 + 날개? X : 아 물론 붙일 수도 있지만, 가급적 떨어뜨리자!
최대한 자잘자잘 나누게 해야 한다!!!!!!!

춤,   폐 - 춤,   날개 - 춤 이러한 경우는 독립적이어서 괜찮다. 대신 춤이 좀 더 큰 개념

Broadcast 컴포넌트
브로드 캐스트 개요 : 한번 찾아보십쇼.

설명문 보십쇼
https://mommoo.tistory.com/55
https://thefif19wlsvy.tistory.com/24
https://m.blog.naver.com/PostView.nhn?blogId=ryutuna&logNo=100132788636&proxyReferer=https:%2F%2Fwww.google.com%2F
https://blackbags.tistory.com/entry/FSM%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80
https://skmagic.tistory.com/310
https://m.blog.naver.com/PostView.nhn?blogId=debuff9710&logNo=221333379009&proxyReferer=https:%2F%2Fwww.google.com%2F

안드로이드 컴포넌트 구성도 봐주십쇼
FSM이란 무엇인가
: 
Event Emitter 한번 봐요우

-------------------------------------------------------------------------------------------------------------------------------------------------------------

Trigger Event 앞으로 우리가 많이 마주칠 내용들!!

이벤트 생성 및 트리거 : (사건) 컨텐츠 개발 및 게임에서는 인터렉션 상호작용 일으키는 것들을 의미한다.
크게 봤을 때 
이벤트 조건 - Condition (조건-비교문)
비교연산자 와 논리연산자 (꼭 알아두세요!!!)
https://opentutorials.org/module/3921/23607

비교문
<,>,==,!(not),<=,>=

             ㅡ ㅡ ㅡ ㅡ ㅡ ㅡ ㅡ ㅡ ㅡ ㅡ ㅡ>
   <ㅡㅡㅡlㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
             l                              ㅣ
-----------l--------------------------ㅣ-----------------------
           8살                          65살

if 8살 이상 && 65살 이하 then
일한다.
End

if 8살 이하 ㅣㅣ65살 이상 then
일한다.
End

 
   <ㅡㅡㅡㅣ                               ㅡ ㅡ ㅡ ㅡ ㅡ ㅡ ㅡ ㅡ>
             l                              ㅣ
-----------l--------------------------ㅣ-----------------------
           8살                          65살

---------------------------------------------------------------------------------------------

<condition>
8살이상 65살 이하

</condition>

<execute>
일을 합니다
</execute>
------------------------------------------------------------------

if 8살 이상 l(or이라는 뜻) 65살 이하
 
Trigger Event - 문법으로 따지면 if 등
Flow control (흐름 제어 - 뭔가를 제어하는 것! )
->  주어진 조건의 결과값에 따라서 프로그램의 수행 순서를 제어

제어문
if,
While

자바 if 흐름 문법
c++ 제어문
c# 제어문
블루프린트 제어문 - 얘는 Branch를 씁니다!  : 분기 Trigger capsule! 사람마다 달라~
-> 스크래치 제어문 : 초딩들이 배우는 코딩 시스템 비슷하다.
근데 조건 결과가 복잡해보일 수 어려워 빡셀 수 있다. 그래서 C++ 문법으로 더 다양하게 나타내는 방법이다.
xml 제어문 

프로그램 언어들이 기능은 다 제공한다. 문법과 스크립트 방식이 다 다른거지
지향하는 것은 같다. 시스템 비슷하다. 


비교연산자 와 논리연산자 (꼭 알아두세요!!!)
--------------------------------------------------------------------------------------------
 